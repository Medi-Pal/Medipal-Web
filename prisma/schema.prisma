// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String
  expires      DateTime

  doctorID String
  doctor   Doctor @relation(fields: [doctorID], references: [Registration_No])
}

model Doctor {
  Registration_No String @id
  Name            String
  Specialisation  String
  ContactNumber   String
  Email           String @unique
  password        String 

  Prescription   Prescription[]
  doctor_session Session[]
}

model Prescription {
  id            Int                       @id @default(autoincrement())
  createdOn     DateTime                  @default(now()) // date and time at which prescription was generated
  medicine_list MedicinesOnPrescription[]

  Doctor       String
  doctor_regNo Doctor @relation(fields: [Doctor], references: [Registration_No])

  isUsedBy        String // patient's contact number
  patient_contact Patient @relation(fields: [isUsedBy], references: [PhoneNumber])
}

model Medicines {
  Serial_No   Int     @id @default(autoincrement())
  brandName   String
  type        String? // optional: syrup or capsule or cream, etc.
  drugName    String
  description String?

  medicines MedicinesOnPrescription[]
}

enum DosageType {
  ml
  drop
  tablet
}

model MedicinesOnPrescription {
  dosageType  DosageType // quantity measurement of the medicine
  timeOfDay   String // morning or afternoon or night
  dosage      Int // quantity of the medicine as prescribed for that timeOfDay
  duration    Int? // total number of instances of the medicine to be taken
  instruction String? // Any other instructions for the same medicine like before food or after food

  prescriptionID Int
  prescription   Prescription @relation(fields: [prescriptionID], references: [id])

  medicineID Int
  medicine   Medicines @relation(fields: [medicineID], references: [Serial_No])

  @@id([prescriptionID, medicineID]) // composite key
}

model Patient {
  PhoneNumber String  @id
  Name        String
  Age         Int?
  City        String?
  State       String
  Country     String

  prescription    Prescription[]
  family_contacts Emergency_Contacts[]
}

model Emergency_Contacts {
  PhoneNumber String  @id
  Name        String
  relation    String? // optional: wife or daughter, etc.

  relatedBy       String // patient's phone number to be linked to the Patient model
  related_patient Patient @relation(fields: [relatedBy], references: [PhoneNumber])
}
