// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctor {
  Registration_No String  @id
  FirstName       String
  LastName        String?
  Age             Int
  ContactNumber   BigInt
  Email           String

  Prescription Prescription[]
}

model Prescription {
  id            Int                       @id @default(autoincrement())
  Doctor        String
  isUsedBy      BigInt // patient's contact number
  createdOn     DateTime                  @default(now()) // date and time at which prescription was generated
  medicine_list MedicinesOnPrescription[]

  doctor_regNo    Doctor  @relation(fields: [Doctor], references: [Registration_No])
  patient_contact Patient @relation(fields: [isUsedBy], references: [PhoneNumber])
}

model Medicines {
  Serial_No   Int     @id @default(autoincrement())
  brandName   String
  type        String? // optional: syrup or capsule or cream, etc.
  drugName    String
  description String?

  medicines MedicinesOnPrescription[]
}

enum DosageType {
  ml
  drop
  tablet
}

model MedicinesOnPrescription {
  prescriptionID Int
  medicineID     Int
  dosageType     DosageType // quantity measurement of the medicine
  timeOfDay      String // morning or afternoon or night
  dosage         Int // quantity of the medicine as prescribed for that timeOfDay
  duration       Int? // total number of instances of the medicine to be taken
  instruction    String? // Any other instructions for the same medicine like before food or after food

  prescription Prescription @relation(fields: [prescriptionID], references: [id])
  medicine     Medicines    @relation(fields: [medicineID], references: [Serial_No])

  @@id([prescriptionID, medicineID]) // composite key
}

model Patient {
  PhoneNumber BigInt  @id
  FirstName   String
  LastName    String?
  Age         Int
  City        String?
  State       String
  Country     String

  prescription    Prescription[]
  family_contacts Emergency_Contacts[]
}

model Emergency_Contacts {
  PhoneNumber BigInt  @id
  FirstName   String
  LastName    String?
  relation    String? // optional: wife or daughter, etc.
  relatedBy   BigInt // patient's phone number to be linked to the Patient model

  related_patient Patient @relation(fields: [relatedBy], references: [PhoneNumber])
}
